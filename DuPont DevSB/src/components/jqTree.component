<!-- 
/**
*
* @file     jqTree.component
* @author   Thomas E. Snyder II <thomas.snyder@usa.dupont.com>
* @version 1.0
*
* Copyright Â© 2010 DuPont. All rights reserved. 
*
* component using the jQuery's treeView plug-in. 
*/
 -->
<apex:component id="JQTV" controller="ctrlTreeView">
    <apex:attribute name="RootNode" description="Root Node" type="INode" required="true" AssignTo="{!top}"/>
    <apex:attribute name="showRoot" description="show Root Node" type="boolean" default="true" AssignTo="{!showTop}"/>
    <apex:attribute name="ClassName" description="classname" type="string" default="treeview" />
    <apex:attribute name="onEvent" description="javascript func onEvent" type="string" default="void" />
    <apex:attribute name="showSideTree" description="showSideTree" type="boolean" default="true" />
    <apex:attribute name="dynamic" description="dynamically load child nodes" type="boolean" default="false"  AssignTo="{!dynamic}"/>
    
    
	<apex:includeScript value="{!URLFOR($Resource.Jquery_1_8_11, 'js/jquery-1.5.1.min.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.jQuery_treeview,'/jquery-treeview/jquery.treeview.css')}" />
    <apex:includescript value="{!URLFOR($Resource.jQuery_treeview,'/jquery-treeview/jquery.treeview.js')}" />


        <apex:outputPanel layout="block" Styleclass="treecontrol" rendered="{!showSideTree && top!=null}">
            <a href="?#">Collapse All</a> | <a href="?#">Expand All</a>
        </apex:outputPanel><br/>
        <apex:outputText escape="false" value="{!NodeAsLI}" />


    <script type="text/javascript">
    
        var j$ = jQuery.noConflict();  
		var clicktimeout;
		
		 
        j$(document).ready(function(j$){
        

        	j$(document).oncontextmenu = function() {return false;}   
        	
            j$(".{!classname}").treeview({
				//prerendered: true,
                collapsed: true,
				{!IF(showSideTree && top!=null ,'control:".treecontrol",','')}
                animated: "medium"
                });
              
              
              /*  for dynamic - only apply the expand event to 'unloaded' */
              if ({!dynamic}) {
	              	//[+] expand || [-] collapse click
					j$("li > div.hitarea").each(function(i) {
	                  j$(this).bind('click', {index:i}, function(e){
							var id;
							try {id=e.currentTarget.parentNode.id;} catch(ex) {}
							{!onEvent}(id,'toggleExpand');
	                  });              	
	                j$("li.unloaded > div.hitarea").each(function(i) {
	                  j$(this).bind('click', {index:i}, function(e){
							var id;
	                  		e.stopPropagation();
	                  		//try {id=e.currentTarget.parentNode.attributes['value'].nodeValue;} catch(ex) {}
							try {id=e.currentTarget.parentNode.id;} catch(ex) {}

							//e.preventDefault();
							e.target.innerHTML='<img src="{!URLFOR($Resource.processing_sm)}"/>';
							{!onEvent}(id,'expand');
	                  });  //true disable hitareaevent
	                });
	                
	                });
	                
	                
	                
                }
                
               
				//node label detect diff between click and dbclick
                j$("li > span").each(function(i) {
                  j$(this).bind('click dblclick', {index:i}, function(e){
                  		var id;
                  		//alert(e);
                  		document.body.style.cursor='wait';
                  		e.stopPropagation();
                  		e.preventDefault();
                  		//try {id=e.currentTarget.parentNode.attributes['value'].nodeValue;} catch(ex) {}
						try {id=e.currentTarget.parentNode.id;} catch(ex) {}
						if (e.type=='click' && (e.detail==null || e.detail==1)) {
						clicktimeout = setTimeout(function(){handleClick(id,e); e=null; id=null;},350);
						}else if (e.type=='dblclick') {
						        if (clicktimeout) {clearTimeout(clicktimeout); clicktimeout = null;}
        						{!onEvent}(id,'dblclick');
						}
						
                  });
                  //disable contextmenu (for right click) (not working for FF)
                  //j$(this).oncontextmenu = function() {return false;}   
                });
                
                //append hover class to spans onHover
                j$("li > span").add( j$("a", this) ).hoverClass();  
                  	
        });
        
       	function handleClick(id,e) {
			switch (e.which) {
		        case 1: {!onEvent}(id,'click'); break;
		        case 2: {!onEvent}(id,'middleClick'); break;
		        case 3: {!onEvent}(id,'rightClick'); break;
		        default:{!onEvent}(id,'otherClick'); break;
			}			
		clicktimeout = null;	    
        }    					
        
        
    </script>
    
</apex:component>